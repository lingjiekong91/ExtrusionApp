selectInput("PCMHT",label = NULL,choices=c("All","yes","NA"))
})
#Special_2
output$PCMSPD_input<-renderUI({
selectInput("PCMSPD",label = NULL,choices=c("All","yes","NA"))
})
output$PCMSLD_input<-renderUI({
selectInput("PCMSLD",label = NULL,choices=c("All","yes","NA"))
})
output$PCMDLN_input<-renderUI({
selectInput("PCMDLN",label = NULL,choices=c("All","yes","NA"))
})
output$PCMULT_input<-renderUI({
selectInput("PCMULT",label = NULL,choices=c("All","yes","NA"))
})
output$PCMVC_input<-renderUI({
selectInput("PCMVC",label = NULL,choices=c("All","yes","NA"))
})
output$PCMIRD_input<-renderUI({
selectInput("PCMIRD",label = NULL,choices=c("All","yes","NA"))
})
#Create Server side of Part Catalog Single Extrusion PPS Data's table-----mytable1
output$mytable2 <- DT::renderDataTable({
DT::datatable({
data_PCM<-multi_pps_data[, input$show_vars2]
if(input$PCMPN!="All"){
data_PCM<-data_PCM[data_PCM$`Part Number`==input$PCMPN,]
}
if(input$PCMPD!="All"){
data_PCM<-data_PCM[data_PCM$`Part Description`==input$PCMPD,]
}
if(input$PCMRN!="All"){
data_PCM<-data_PCM[data_PCM$`Resin Number`==input$PCMRN,]
}
if(input$PCMRD!="All"){
data_PCM<-data_PCM[data_PCM$`Resin Descriptionr`==input$PCMRD,]
}
if(input$PCMPPSN!="All"){
data_PCM<-data_PCM[data_PCM$`PPS Number`==input$PCMPPSN,]
}
if(input$PCMDS_min!=PCMDSmin || input$PCMDS_max!=PCMDSmax){
data_PCM<-data_PCM[data_PCM$`Die Size (in)`>=input$PCMDS_min & data_PCM$`Die Size (in)`<=input$PCMDS_max,]
}
if(input$PCMDLL!="All"){
data_PCM<-data_PCM[data_PCM$`Die Land Length (in)`==input$PCMDLL,]
}
if(input$PCMTS_min!=PCMTSmin || input$PCMTS_max!=PCMTSmax){
data_PCM<-data_PCM[data_PCM$`Die Size (in)`>=input$PCMTS_min & data_PCM$`Die Size (in)`<=input$PCMTS_max,]
}
if(input$PCMTLL!="All"){
data_PCM<-data_PCM[data_PCM$`Tip Land Length (in)`==input$PCMTLL,]
}
if(input$PCMSP!="All"){
data_PCM<-data_PCM[data_PCM$`Screw Print`==input$PCMSP,]
}
if(input$PCMFT_min!=PCMFTmin || input$PCMFT_max!=PCMFTmax){
data_PCM<-data_PCM[data_PCM$`Feedthroat Temperature  F`>=input$PCMFT_min & data_PCM$`Feedthroat Temperature  F`<=input$PCMFT_max,]
}
if(input$PCMBZT1_min!=PCMBZT1min || input$PCMBZT1_max!=PCMBZT1max){
data_PCM<-data_PCM[data_PCM$'Part Number' %in%  unique(data_PCM$'Part Number'[data_PCM$`Barrel Zone 1 Temperature  F`>=input$PCMBZT1_min & data_PCM$`Barrel Zone 1 Temperature  F`<=input$PCMBZT1_max]),]
}
if(input$PCMBZT2_min!=PCMBZT2min || input$PCMBZT2_max!=PCMBZT2max){
data_PCM<-data_PCM[data_PCM$'Part Number' %in%  unique(data_PCM$'Part Number'[data_PCM$`Barrel Zone 2 Temperature  F`>=input$PCMBZT2_min & data_PCM$`Barrel Zone 2 Temperature  F`<=input$PCMBZT2_max]),]
}
if(input$PCMBZT3_min!=PCMBZT3min || input$PCMBZT3_max!=PCMBZT3max){
data_PCM<-data_PCM[data_PCM$'Part Number' %in%  unique(data_PCM$'Part Number'[data_PCM$`Barrel Zone 3 Temperature  F`>=input$PCMBZT3_min & data_PCM$`Barrel Zone 3 Temperature  F`<=input$PCMBZT3_max]),]
}
if(input$PCMCT_min!=PCMCTmin || input$PCMCT_max!=PCMCTmax){
data_PCM<-data_PCM[data_PCM$`Clamp Temperature  F` %in% unique(data_PCM$`Clamp Temperature  F`[data_PCM$`Clamp Temperature  F`>=input$PCMCT_min & data_PCM$`Clamp Temperature  F`<=input$PCMCT_max]),]
}
if(input$PCMAT_min!=PCMATmin || input$PCMAT_max!=PCMATmax){
data_PCM<-data_PCM[data_PCM$`Adapter Temperature  F` %in% unique(data_PCM$`Adapter Temperature  F`[data_PCM$`Adapter Temperature  F`>=input$PCMAT_min & data_PCM$`Adapter Temperature  F`<=input$PCMAT_max]),]
}
if(input$PCMDT1_min!=PCMDT1min || input$PCMDT1_max!=PCMDT1max){
data_PCM<-data_PCM[data_PCM$`Die 1 Temperature  F` %in% unique(data_PCM$`Die 1 Temperature  F`[data_PCM$`Die 1 Temperature  F`>=input$PCMDT1_min & data_PCM$`Die 1 Temperature  F`<=input$PCMDT1_max]),]
}
if(input$PCMDT2_min!=PCMDT2min || input$PCMDT2_max!=PCMDT2max){
data_PCM<-data_PCM[data_PCM$`Die 2 Temperature  F` %in% unique(data_PCM$`Die 2 Temperature  F`[data_PCM$`Die 2 Temperature  F`>=input$PCMDT2_min & data_PCM$`Die 2 Temperature  F`<=input$PCMDT2_max]),]
}
if(input$PCMIDI_min!=PCMIDImin || input$PCMIDI_max!=PCMIDImax){
data_PCM<-data_PCM[data_PCM$`Inner Diameter (in)` %in% unique(data_PCM$`Inner Diameter (in)`[data_PCM$`Inner Diameter (in)`>=input$PCMIDI_min & data_PCM$`Inner Diameter (in)`<=input$PCMIDI_max]),]
}
if(input$PCMODI_min!=PCMODImin || input$PCMODI_max!=PCMODImax){
data_PCM<-data_PCM[data_PCM$`Outer Diameter (in)` %in% unique(data_PCM$`Outer Diameter (in)`[data_PCM$`Outer Diameter (in)`>=input$PCMODI_min & data_PCM$`Outer Diameter (in)`<=input$PCMODI_max]),]
}
if(input$PCMIWT_min!=PCMIWTmin || input$PCMIWT_max!=PCMIWTmax){
data_PCM<-data_PCM[data_PCM$`Inner Wall Thickness (in)` %in% unique(data_PCM$`Inner Wall Thickness (in)`[data_PCM$`Inner Wall Thickness (in)`>=input$PCMIWT_min & data_PCM$`Inner Wall Thickness (in)`<=input$PCMIWT_max]),]
}
if(input$PCMMWT_min!=PCMMWTmin || input$PCMMWT_max!=PCMMWTmax){
data_PCM<-data_PCM[data_PCM$`Middle Wall Thickness (in)` %in% unique(data_PCM$`Middle Wall Thickness (in)`[data_PCM$`Middle Wall Thickness (in)`>=input$PCMMWT_min & data_PCM$`Middle Wall Thickness (in)`<=input$PCMMWT_max]),]
}
if(input$PCMOWT_min!=PCMOWTmin || input$PCMOWT_max!=PCMOWTmax){
data_PCM<-data_PCM[data_PCM$`Outer Wall Thickness (in)` %in% unique(data_PCM$`Outer Wall Thickness (in)`[data_PCM$`Outer Wall Thickness (in)`>=input$PCMOWT_min & data_PCM$`Outer Wall Thickness (in)`<=input$PCMOWT_max]),]
}
if(input$PCMTWT_min!=PCMTWTmin || input$PCMTWT_max!=PCMTWTmax){
data_PCM<-data_PCM[data_PCM$`Total Wall Thickness (in)` %in% unique(data_PCM$`Total Wall Thickness (in)` [data_PCM$`Total Wall Thickness (in)`>=input$PCMTWT_min & data_PCM$`Total Wall Thickness (in)`<=input$PCMTWT_max]),]
}
if(input$PCMOR_min!=PCMORmin || input$PCMOR_max!=PCMORmax){
data_PCM<-data_PCM[data_PCM$`Out of Roundness (in)` %in% unique(data_PCM$`Out of Roundness (in)`[data_PCM$`Out of Roundness (in)`>=input$PCMOR_min & data_PCM$`Out of Roundness (in)`<=input$PCMOR_max]),]
}
if(input$PCMCCT_min!=PCMCCTmin || input$PCMCCT_max!=PCMCCTmax){
data_PCM<-data_PCM[data_PCM$`Concentricity (in)` %in% unique(data_PCM$`Concentricity (in)`[data_PCM$`Concentricity (in)`>=input$PCMCCT_min & data_PCM$`Concentricity (in)`<=input$PCMCCT_max]),]
}
if(input$PCMLength_min!=PCMLengthmin || input$PCMLength_max!=PCMLengthmax){
data_PCM<-data_PCM[data_PCM$`Length (in)` %in% unique(data_PCM$`Length (in)`[data_PCM$`Length (in)`>=input$PCMLength_min & data_PCM$`Length (in)`<=input$PCMLength_max]),]
}
if(input$PCMToLength_min!=PCMToLengthmin || input$PCMToLength_max!=PCMToLengthmax){
data_PCM<-data_PCM[data_PCM$`Total Length` %in% unique(data_PCM$`Total Length`[data_PCM$`Total Length`>=input$PCMToLength_min & data_PCM$`Total Length`<=input$PCMToLength_max]),]
}
if(input$PCMNEXIV!="All"){
if(input$PCMNEXIV=="yes"){
data_PCM<-data_PCM[data_PCM$`NEXIV`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`NEXIV`=="",]
}
}
if(input$PCMAnnealed!="All"){
if(input$PCMAnnealed=="yes"){
data_PCM<-data_PCM[data_PCM$`Annealed`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Annealed`=="",]
}
}
if(input$PCMCaliper!="All"){
if(input$PCMCaliper=="yes"){
data_PCM<-data_PCM[data_PCM$`Caliper`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Caliper`=="",]
}
}
if(input$PCMOS!="All"){
if(input$PCMOS=="yes"){
data_PCM<-data_PCM[data_PCM$`OD Sort`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`OD Sort`=="",]
}
}
if(input$PCMMP!="All"){
if(input$PCMMP=="yes"){
data_PCM<-data_PCM[data_PCM$`Melt Pump`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Melt Pump`=="",]
}
}
if(input$PCMHT!="All"){
if(input$PCMHT=="yes"){
data_PCM<-data_PCM[data_PCM$`Hypo Tip`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Hypo Tip`=="",]
}
}
if(input$PCMSPD!="All"){
if(input$PCMSPD=="yes"){
data_PCM<-data_PCM[data_PCM$`Sparker Die`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Sparker Die`=="",]
}
}
if(input$PCMSLD!="All"){
if(input$PCMSLD=="yes"){
data_PCM<-data_PCM[data_PCM$`Slicking Die`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Slicking Die`=="",]
}
}
if(input$PCMDLN!="All"){
if(input$PCMDLN=="yes"){
data_PCM<-data_PCM[data_PCM$`Delamination`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Delamination`=="",]
}
}
if(input$PCMULT!="All"){
if(input$PCMULT=="yes"){
data_PCM<-data_PCM[data_PCM$`Ultrasonic`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Ultrasonic`=="",]
}
}
if(input$PCMVC!="All"){
if(input$PCMVC=="yes"){
data_PCM<-data_PCM[data_PCM$`Vacuum Calibration`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Vacuum Calibration`=="",]
}
}
if(input$PCMIRD!="All"){
if(input$PCMIRD=="yes"){
data_PCM<-data_PCM[data_PCM$`Irradiated`=="yes",]
} else{
data_PCM<-data_PCM[data_PCM$`Irradiated`=="",]
}
}
data_PCM
},
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE))
})
#
#Create Server side of input box for Part Catalog Tapered Extrusion PPS Data---table 3
output$PCTPN_input<-renderUI({
selectizeInput("PCTPN","Part Number",
c("All",unique(as.character(tapered_pps_data$`Part Number`))),
selected="All")
})
output$PCTPD_input<-renderUI({
selectInput("PCTPD","Part Description",
c("All",unique(as.character(tapered_pps_data$`Part Description`))))
})
output$PCTRN_input<-renderUI({
selectInput("PCTRN","Resin Number",
c("All",unique(as.character(tapered_pps_data$`Resin Number`))))
})
output$PCTRD_input<-renderUI({
selectInput("PCTRD","Resin Description",
c("All",unique(as.character(tapered_pps_data$`Resin Description`))))
})
output$PCTPPSN_input<-renderUI({
selectInput("PCTPPSN","PPS Number",
c("All",unique(as.character(tapered_pps_data$`PPS Number` ))))
})
output$PCTDS_min_input<-renderUI({
numericInput("PCTDS_min",label = NULL,value=PCTDSmin,step=0.001)
})
output$PCTDS_max_input<-renderUI({
numericInput("PCTDS_max",label = NULL,value=PCTDSmax,step=0.001)
})
output$PCTDLL_input<-renderUI({
DLL_min=-1
DLL_max=0.54
sliderInput("PCTDLL",label = NULL,min=DLL_min,max=DLL_max,value=c(DLL_min,DLL_max))
})
output$PCTTS_input<-renderUI({
TS_min=-1
TS_max=0.49
sliderInput("PCTTS",label = NULL,min=TS_min,max=TS_max,value=c(TS_min,TS_max))
})
output$PCTTLL_input<-renderUI({
TLL_min=-1
TLL_max=0.49
sliderInput("PCTTLL",label = NULL,min=TLL_min,max=TLL_max,value=c(TLL_min,TLL_max))
})
output$PCTSP_input<-renderUI({
selectInput("PCTSP",label = NULL,
c("All",unique(as.character(tapered_pps_data$`Screw Print`))))
})
output$PCTFT_input<-renderUI({
FT_min=1
FT_max=2
sliderInput("PCTFT","Feedthroat Temperature F",min=FT_min,max=FT_max,value=c(FT_min,FT_max),sep="",round=-4)
})
output$PCTBZT1_input<-renderUI({
selectInput("PCTBZT1","Barrel Zone 1 Temperature F",
c("All",unique(as.character(tapered_pps_data$`Barrel Zone 1 Temperature  F`))))
})
output$PCTBZT2_input<-renderUI({
selectInput("PCTBZT2","Barrel Zone 2 Temperature F",
c("All",unique(as.character(tapered_pps_data$`Barrel Zone 2 Temperature  F`))))
})
output$PCTBZT3_input<-renderUI({
selectInput("PCTBZT3","Barrel Zone 3 Temperature F",
c("All",unique(as.character(tapered_pps_data$`Barrel Zone 3 Temperature  F`))))
})
output$PCTDT1_input<-renderUI({
DT1_min=0.0009
DT1_max=0.353
sliderInput("PCTDT1","Die 1 Temperature F",min=DT1_min,max=DT1_max,value=c(DT1_min,DT1_max),sep="",round=-4)
})
output$PCTDT2_input<-renderUI({
DT2_min=0.0009
DT2_max=0.353
sliderInput("PCTDT2","Die 2 Temperature F",min=DT2_min,max=DT2_max,value=c(DT2_min,DT2_max),sep="",round=-4)
})
output$PCTPID_input<-renderUI({
PID_min=-1
PID_max=0.54
sliderInput("PCTPID","Proximal Inner Diameter (in)",min=PID_min,max=PID_max,value=c(PID_min,PID_max))
})
output$PCTPOD_input<-renderUI({
POD_min=-1
POD_max=0.54
sliderInput("PCTPOD","Proximal Outer Diameter (in)",min=POD_min,max=POD_max,value=c(POD_min,POD_max))
})
output$PCTPWT_input<-renderUI({
PWT_min=-1
PWT_max=0.49
sliderInput("PCTPWT","Proximal Wall Thickness (in)",min=PWT_min,max=PWT_max,value=c(PWT_min,PWT_max))
})
output$PCTPOR_input<-renderUI({
POR_min=-1
POR_max=0.49
sliderInput("PCTPOR","Proximal Out of Roundness (in)",min=POR_min,max=POR_max,value=c(POR_min,POR_max))
})
output$PCTPC_input<-renderUI({
PC_min=-1
PC_max=0.49
sliderInput("PCTPC","Proximal Concentricity (in)",min=PC_min,max=PC_max,value=c(PC_min,PC_max))
})
output$PCTDID_input<-renderUI({
DID_min=0.0009
DID_max=0.353
sliderInput("PCTDID","Distal Inner Diameter(in)",min=DID_min,max=DID_max,value=c(DID_min,DID_max),sep="",round=-4)
})
output$PCTDOD_input<-renderUI({
DOD_min<-(min(tapered_pps_data$`Distal Outer Diameter (in)`))
DOD_max<-(max(tapered_pps_data$`Distal Outer Diameter (in)`))
sliderInput("PCTDOD","Distal Outer Diameter(in)",min=DOD_min,max=DOD_max,value=c(DOD_min,DOD_max),sep="",round=-4)
})
output$PCTDWT_input<-renderUI({
DWT_min=0.0005
DWT_max=0.053
sliderInput("PCTDWT","Distal Wall Thickness(in)",min=DWT_min,max=DWT_max,value=c(DWT_min,DWT_max),sep="",round=-4)
})
output$PCTDOR_input<-renderUI({
DOR_min=0
DOR_max=0.01
sliderInput("PCTDOR","Distal Out of Roundness(in)",min=DOR_min,max=DOR_max,value=c(DOR_min,DOR_max),sep="",round=-4)
})
output$PCTDC_input<-renderUI({
DC_min=1
DC_max=2
sliderInput("PCTDC","Distal Concentricity(in)",min=DC_min,max=DC_max,value=c(DC_min,DC_max),sep="",round=-4)
})
output$PCTPL_input<-renderUI({
PL_min=0.015
PL_max=1
sliderInput("PCTPL","Proximal Length (in)",min=PL_min,max=PL_max,value=c(PL_min,PL_max),sep="",round=-4)
})
output$PCTTL_input<-renderUI({
TL_min=0.015
TL_max=1
sliderInput("PCTTL","Transition Length (in)",min=TL_min,max=TL_max,value=c(TL_min,TL_max),sep="",round=-4)
})
output$PCTDL_input<-renderUI({
DL_min=0.015
DL_max=1
sliderInput("PCTDL","Distal Length (in)",min=DL_min,max=DL_max,value=c(DL_min,DL_max),sep="",round=-4)
})
output$PCTTL_input<-renderUI({
TL_min=0.015
TL_max=1
sliderInput("PCTTL","Total Length (in)",min=TL_min,max=TL_max,value=c(TL_min,TL_max),sep="",round=-4)
})
output$PCTPPD_input<-renderUI({
selectInput("PCTPPD","Perpendicularity (in)",
c("All",unique(as.character(tapered_pps_data$`Perpendicularity (in)`))))
})
output$PCTNEXIV_input<-renderUI({
selectInput("PCTNEXIV","NEXIV",choices=c("All","yes","No"))
})
output$PCTAnnealed_input<-renderUI({
selectInput("PCTAnnealed","Annealed",choices=c("All","yes","No"))
})
output$PCTCaliper_input<-renderUI({
selectInput("PCTCaliper","Caliper",choices=c("All","yes","No"))
})
output$PCTOS_input<-renderUI({
selectInput("PCTOS","OD Sort",choices=c("All","yes","No"))
})
output$PCTMP_input<-renderUI({
selectInput("PCTMP","Melt Pump",choices=c("All","yes","No"))
})
output$PCTHT_input<-renderUI({
selectInput("PCTHT","Hypo Tip",choices=c("All","yes","No"))
})
output$PCTSPD_input<-renderUI({
selectInput("PCTSPD","Spark Die",choices=c("All","yes","No"))
})
output$PCTSLD_input<-renderUI({
selectInput("PCTSLD","Slicking Die",choices=c("All","yes","No"))
})
output$PCTDLN_input<-renderUI({
selectInput("PCTDLN","Delamination",choices=c("All","yes","No"))
})
output$PCTULT_input<-renderUI({
selectInput("PCTULT","Ultrasonic",choices=c("All","yes","No"))
})
output$PCTVC_input<-renderUI({
selectInput("PCSVC","Vacuum Calibration",choices=c("All","yes","No"))
})
output$PCTIRD_input<-renderUI({
selectInput("PCTIRD","Irradiated",choices=c("All","yes","No"))
})
#create Server side of Tapered Extrusion PPS Data-----mytable3
output$mytable3 <- DT::renderDataTable({
DT::datatable({
data_PCT<-tapered_pps_data[, input$show_vars3]
if(input$PCTPN!="All"){
data_PCT<-data_PCT[data_PCT$`Part Number`==input$PCTPN,]
}
if(input$PCTPD!="All"){
data_PCT<-data_PCT[data_PCT$`Part Description`==input$PCTPD,]
}
if(input$PCTRN!="All"){
data_PCT<-data_PCT[data_PCT$`Resin Number`==input$PCTRN,]
}
if(input$PCTRD!="All"){
data_PCT<-data_PCT[data_PCT$`Resin Description`==input$PCTRD,]
}
if(input$PCTPPSN!="All"){
data_PCT<-data_PCT[data_PCT$`PPS Number`==input$PCTPPSN,]
}
if(input$PCTDS_min!=PCTDSmin || input$PCTDS_max!=PCTDSmax){
data_PCT<-data_PCT[data_PCT$`Die Size (in)`>=input$PCTDS_min & data_PCT$`Die Size (in)`<=input$PCTDS_max,]
}
if(input$PCTBZT1!="All"){
data_PCT<-data_PCT[data_PCT$`Barrel Zone 1 Temperature  F`==input$PCTBZT1,]
}
if(input$PCTBZT2!="All"){
data_PCT<-data_PCT[data_PCT$`Barrel Zone 2 Temperature  F`==input$PCTBZT2,]
}
if(input$PCTBZT3!="All"){
data_PCT<-data_PCT[data_PCT$`Barrel Zone 3 Temperature  F`==input$PCTBZT3,]
}
data_PCT
},
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE)
)
})
#Create Server side of input box for Output MES---table 4
output$OPMMN_input<-renderUI({
selectInput("OPMMN","Material Number",c("All",unique(as.character(single_tari_data$`Material Number`))))
})
output$OPMBN_input<-renderUI({
selectInput("OPMBN","SAP Batch Number",c("All",unique(as.character(single_tari_data$`SAP Batch Number`))))
})
output$OPMSN_input<-renderUI({
selectInput("OPMSN","SWR Number",c("All",unique(as.character(single_tari_data$`SWR Number`))))
})
output$OPMOI_input<-renderUI({
selectInput("OPMOI","Operator ID",c("All",unique(as.character(single_tari_data$`Operator ID`))))
})
output$OPMDR_input<-renderUI({
dateRangeInput("OPMDR","Start Date Range",start=Time_Start,end=Time_End)
})
#create Server side of Output MES table-----mytable4
output$mytable4 <- DT::renderDataTable({
DT::datatable({
if (input$PCSPN=="All"){
data_OPM<-single_tari_data[,input$show_vars4]
}
else {data_OPM<-single_tari_data[single_tari_data$`Material Number`==input$PCSPN,input$show_vars4]
}
if(input$OPMMN!="All"){
data_OPM<-data_OPM[data_OPM$`Material Number`==input$OPMMN,]
}
if(input$OPMBN!="All"){
data_OPM<-data_OPM[data_OPM$`SAP Batch Number`==input$OPMBN,]
}
if(input$OPMSN!="All"){
data_OPM<-data_OPM[data_OPM$`SWR Number`==input$OPMSN,]
}
if(input$OPMOI!="All"){
data_OPM<-data_OPM[data_OPM$`Operator ID`==input$OPMOI,]
}
if(input$OPMDR[1]!=Time_Start || input$OPMDR[2]!=Time_End){
data_OPM<-data_OPM[(data_OPM$`Start Date`<=input$OPMDR[2] & data_OPM$`Start Date`>=input$OPMDR[1]),]
}
data_OPM
},
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE) )
})
output$mytable5 <- DT::renderDataTable({
DT::datatable(resin_data[, input$show_vars5],
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE),
filter = "top")
})
output$mytable6 <- DT::renderDataTable({
DT::datatable(screw_data[, input$show_vars6],
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE),
filter = "top")
})
#
}#end server
# Run the application
shinyApp(ui = ui, server = server)
runApp('Desktop/Shiny/ExtrusionApp/R code/ExtrusionApp/ExtrusionApp_Server.R')
runApp('Desktop/Shiny/ExtrusionApp/R code/ExtrusionApp/ExtrusionApp_Server.R')
