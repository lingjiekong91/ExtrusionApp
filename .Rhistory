if(input$PCMTS!="All"){
data_PCM<-data_PCM[data_PCM$`Tip Size (in)`==input$PCMTS,]
}
if(input$PCMID!="All"){
data_PCM<-data_PCM[data_PCM$`Inner Diameter (in)`==input$PCMID,]
}
if(input$PCMOD!="All"){
data_PCM<-data_PCM[data_PCM$`Outer Diameter (in)`==input$PCMOD,]
}
if(input$PCMIWT!="All"){
data_PCM<-data_PCM[data_PCM$`Inner Wall Thickness (in)`==input$PCMIWT,]
}
if(input$PCMMWT!="All"){
data_PCM<-data_PCM[data_PCM$`Middle Wall Thickness (in)`==input$PCMMWT,]
}
if(input$PCMOWT!="All"){
data_PCM<-data_PCM[data_PCM$`Outer Wall Thickness (in)`==input$PCMOWT,]
}
if(input$PCMTWT!="All"){
data_PCM<-data_PCM[data_PCM$`Total Wall Thickness (in)`==input$PCMTWT,]
}
if(input$PCMTL!="All"){
data_PCM<-data_PCM[data_PCM$`Total Length`==input$PCMTL,]
}
data_PCM
},
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE))
})
#
#Create Server side of input box for Part Catalog Tapered Extrusion PPS Data---table 3
output$PCTPN_input<-renderUI({
selectizeInput("PCTPN","Part Number",
c("All",unique(as.character(tapered_pps_data$`Part Number`))),
selected="All")
})
output$PCTPD_input<-renderUI({
selectInput("PCTPD","Part Description",
c("All",unique(as.character(tapered_pps_data$`Part Description`))))
})
output$PCTRN_input<-renderUI({
selectInput("PCTRN","Resin Number",
c("All",unique(as.character(tapered_pps_data$`Resin Number`))))
})
output$PCTRD_input<-renderUI({
selectInput("PCTRD","Resin Description",
c("All",unique(as.character(tapered_pps_data$`Resin Description`))))
})
output$PCTPPSN_input<-renderUI({
selectInput("PCTPPSN","PPS Number",
c("All",unique(as.character(tapered_pps_data$`PPS Number` ))))
})
output$PCTDS_input<-renderUI({
DS_min=-1
DS_max=0.54
sliderInput("PCTDS","Die Size(in)",min=DS_min,max=DS_max,value=c(DS_min,DS_max))
})
output$PCTDLL_input<-renderUI({
DLL_min=-1
DLL_max=0.54
sliderInput("PCTDLL","Die Land Length (in)",min=DLL_min,max=DLL_max,value=c(DLL_min,DLL_max))
})
output$PCTTS_input<-renderUI({
TS_min=-1
TS_max=0.49
sliderInput("PCTTS","Tip Size(in)",min=TS_min,max=TS_max,value=c(TS_min,TS_max))
})
output$PCTTLL_input<-renderUI({
TLL_min=-1
TLL_max=0.49
sliderInput("PCTTLL","Tip Land Length (in)",min=TLL_min,max=TLL_max,value=c(TLL_min,TLL_max))
})
output$PCTSP_input<-renderUI({
selectInput("PCTSP","Screw Print",
c("All",unique(as.character(tapered_pps_data$`Screw Print`))))
})
output$PCTFT_input<-renderUI({
FT_min=0.0009
FT_max=0.353
sliderInput("PCTFT","Feedthroat Temperature F",min=FT_min,max=FT_max,value=c(FT_min,FT_max),sep="",round=-4)
})
output$PCTBZT1_input<-renderUI({
BZT1_min=0.0009
BZT1_max=0.353
sliderInput("PCTBZT1","Barrel Zone 1 Temperature F",min=BZT1_min,max=BZT1_max,value=c(BZT1_min,BZT1_max),sep="",round=-4)
})
output$PCTBZT2_input<-renderUI({
BZT2_min=0.0009
BZT2_max=0.353
sliderInput("PCTBZT2","Barrel Zone 2 Temperature F",min=BZT2_min,max=BZT2_max,value=c(BZT2_min,BZT2_max),sep="",round=-4)
})
output$PCTBZT3_input<-renderUI({
BZT3_min=0.0009
BZT3_max=0.353
sliderInput("PCTBZT3","Barrel Zone 3 Temperature F",min=BZT3_min,max=BZT3_max,value=c(BZT3_min,BZT3_max),sep="",round=-4)
})
output$PCTDT1_input<-renderUI({
DT1_min=0.0009
DT1_max=0.353
sliderInput("PCTDT1","Die 1 Temperature F",min=DT1_min,max=DT1_max,value=c(DT1_min,DT1_max),sep="",round=-4)
})
output$PCTDT2_input<-renderUI({
DT2_min=0.0009
DT2_max=0.353
sliderInput("PCTDT2","Die 2 Temperature F",min=DT2_min,max=DT2_max,value=c(DT2_min,DT2_max),sep="",round=-4)
})
output$PCTPID_input<-renderUI({
PID_min=-1
PID_max=0.54
sliderInput("PCTPID","Proximal Inner Diameter (in)",min=PID_min,max=PID_max,value=c(PID_min,PID_max))
})
output$PCTPOD_input<-renderUI({
POD_min=-1
POD_max=0.54
sliderInput("PCTPOD","Proximal Outer Diameter (in)",min=POD_min,max=POD_max,value=c(POD_min,POD_max))
})
output$PCTPWT_input<-renderUI({
PWT_min=-1
PWT_max=0.49
sliderInput("PCTPWT","Proximal Wall Thickness (in)",min=PWT_min,max=PWT_max,value=c(PWT_min,PWT_max))
})
output$PCTPOR_input<-renderUI({
POR_min=-1
POR_max=0.49
sliderInput("PCTPOR","Proximal Out of Roundness (in)",min=POR_min,max=POR_max,value=c(POR_min,POR_max))
})
output$PCTPC_input<-renderUI({
PC_min=-1
PC_max=0.49
sliderInput("PCTPC","Proximal Concentricity (in)",min=PC_min,max=PC_max,value=c(PC_min,PC_max))
})
output$PCTDID_input<-renderUI({
DID_min=0.0009
DID_max=0.353
sliderInput("PCTDID","Distal Inner Diameter(in)",min=DID_min,max=DID_max,value=c(DID_min,DID_max),sep="",round=-4)
})
output$PCTDOD_input<-renderUI({
DOD_min=0.0133
DOD_max=0.495
sliderInput("PCTDOD","Distal Out Diameter(in)",min=DOD_min,max=DOD_max,value=c(DOD_min,DOD_max),sep="",round=-4)
})
output$PCTDWT_input<-renderUI({
DWT_min=0.0005
DWT_max=0.053
sliderInput("PCTDWT","Distal Wall Thickness(in)",min=DWT_min,max=DWT_max,value=c(DWT_min,DWT_max),sep="",round=-4)
})
output$PCTDOR_input<-renderUI({
DOR_min=0
DOR_max=0.01
sliderInput("PCTDOR","Distal Out of Roundness(in)",min=DOR_min,max=DOR_max,value=c(DOR_min,DOR_max),sep="",round=-4)
})
output$PCTDC_input<-renderUI({
DC_min=1
DC_max=2
sliderInput("PCTDC","Distal Concentricity(in)",min=DC_min,max=DC_max,value=c(DC_min,DC_max),sep="",round=-4)
})
output$PCTPL_input<-renderUI({
PL_min=0.015
PL_max=1
sliderInput("PCTPL","Proximal Length (in)",min=PL_min,max=PL_max,value=c(PL_min,PL_max),sep="",round=-4)
})
output$PCTTL_input<-renderUI({
TL_min=0.015
TL_max=1
sliderInput("PCTTL","Transition Length (in)",min=TL_min,max=TL_max,value=c(TL_min,TL_max),sep="",round=-4)
})
output$PCTDL_input<-renderUI({
DL_min=0.015
DL_max=1
sliderInput("PCTDL","Distal Length (in)",min=DL_min,max=DL_max,value=c(DL_min,DL_max),sep="",round=-4)
})
output$PCTTL_input<-renderUI({
TL_min=0.015
TL_max=1
sliderInput("PCTTL","Total Length (in)",min=TL_min,max=TL_max,value=c(TL_min,TL_max),sep="",round=-4)
})
output$PCTPPD_input<-renderUI({
selectInput("PCTPPD","Perpendicularity (in)",
c("All",unique(as.character(tapered_pps_data$`Perpendicularity (in)`))))
})
output$PCTNEXIV_input<-renderUI({
selectInput("PCTNEXIV","NEXIV",choices=c("All","yes","No"))
})
output$PCTAnnealed_input<-renderUI({
selectInput("PCTAnnealed","Annealed",choices=c("All","yes","No"))
})
output$PCTCaliper_input<-renderUI({
selectInput("PCTCaliper","Caliper",choices=c("All","yes","No"))
})
output$PCTOS_input<-renderUI({
selectInput("PCTOS","OD Sort",choices=c("All","yes","No"))
})
output$PCTMP_input<-renderUI({
selectInput("PCTMP","Melt Pump",choices=c("All","yes","No"))
})
output$PCTHT_input<-renderUI({
selectInput("PCTHT","Hypo Tip",choices=c("All","yes","No"))
})
output$PCTSPD_input<-renderUI({
selectInput("PCTSPD","Spark Die",choices=c("All","yes","No"))
})
output$PCTSLD_input<-renderUI({
selectInput("PCTSLD","Slicking Die",choices=c("All","yes","No"))
})
output$PCTDLN_input<-renderUI({
selectInput("PCTDLN","Delamination",choices=c("All","yes","No"))
})
output$PCTULT_input<-renderUI({
selectInput("PCTULT","Ultrasonic",choices=c("All","yes","No"))
})
output$PCSVC_input<-renderUI({
selectInput("PCSVC","Vacuum Calibration",choices=c("All","yes","No"))
})
output$PCTIRD_input<-renderUI({
selectInput("PCTIRD","Irradiated",choices=c("All","yes","No"))
})
#create Server side of Tapered Extrusion PPS Data-----mytable3
output$mytable3 <- DT::renderDataTable({
DT::datatable({
data_PCT<-tapered_pps_data[, input$show_vars3]
if(input$PCTPN!="All"){
data_PCT<-data_PCT[data_PCT$`Part Number`==input$PCTPN,]
}
if(input$PCTPD!="All"){
data_PCT<-data_PCT[data_PCT$`Part Description`==input$PCTPD,]
}
if(input$PCTRN!="All"){
data_PCT<-data_PCT[data_PCT$`Resin Number`==input$PCTRN,]
}
if(input$PCTRD!="All"){
data_PCT<-data_PCT[data_PCT$`Resin Description`==input$PCTRD,]
}
if(input$PCTPPSN!="All"){
data_PCT<-data_PCT[data_PCT$`PPS Number`==input$PCTPPSN,]
}
data_PCT
},
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE)
)
})
#Create Server side of input box for Output MES---table 4
output$OPMMN_input<-renderUI({
selectInput("OPMMN","Material Number",c("All",unique(as.character(single_tari_data$`Material Number`))))
})
output$OPMBN_input<-renderUI({
selectInput("OPMBN","SAP Batch Number",c("All",unique(as.character(single_tari_data$`SAP Batch Number`))))
})
output$OPMSN_input<-renderUI({
selectInput("OPMSN","SWR Number",c("All",unique(as.character(single_tari_data$`SWR Number`))))
})
output$OPMOI_input<-renderUI({
selectInput("OPMOI","Operator ID",c("All",unique(as.character(single_tari_data$`Operator ID`))))
})
output$OPMDR_input<-renderUI({
dateRangeInput("OPMDR","Start Date Range",start=Time_Start,end=Time_End)
})
#create Server side of Output MES table-----mytable4
output$mytable4 <- DT::renderDataTable({
DT::datatable({
if (input$PCSPN=="All"){
data_OPM<-single_tari_data[,input$show_vars4]
}
else {data_OPM<-single_tari_data[single_tari_data$`Material Number`==input$PN,input$show_vars4]
}
if(input$OPMMN!="All"){
data_OPM<-data_OPM[data_OPM$`Material Number`==input$OPMMN,]
}
if(input$OPMBN!="All"){
data_OPM<-data_OPM[data_OPM$`SAP Batch Number`==input$OPMBN,]
}
if(input$OPMSN!="All"){
data_OPM<-data_OPM[data_OPM$`SWR Number`==input$OPMSN,]
}
if(input$OPMOI!="All"){
data_OPM<-data_OPM[data_OPM$`Operator ID`==input$OPMOI,]
}
if(input$OPMDR[1]!=Time_Start || input$OPMDR[2]!=Time_End){
data_OPM<-data_OPM[(data_OPM$`Start Date`<=input$OPMDR[2] & data_OPM$`Start Date`>=input$OPMDR[1]),]
}
data_OPM
},
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE) )
})
output$mytable5 <- DT::renderDataTable({
DT::datatable(resin_data[, input$show_vars5],
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE),
filter = "top")
})
output$mytable6 <- DT::renderDataTable({
DT::datatable(screw_data[, input$show_vars6],
options = list(orderClasses = TRUE,
columnDefs = list(list(className = 'dt-center',
targets = "_all"
)
),
scrollX=TRUE,
scrollY=500,
autoWidth=TRUE),
filter = "top")
})
#
}#end server
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(bootstrap)
library(jpeg)
library(ggplot2)
library(DT)
library(stringr)
library(gsubfn)
library(proto)
library(sqldf)
ui<-fluidPage(
# Application title
titlePanel("Extrusion Application"),
tabsetPanel(id = "application",
tabPanel('Part Catalog',
sidebarPanel(
conditionalPanel(
'input.dataset === "Single Extrusion PPS Data"',uiOutput("show_vars1_input")),
conditionalPanel(
'input.dataset === "Multi-Layered Extrusion PPS Data"',uiOutput("show_vars2_input")),
conditionalPanel(
'input.dataset === "Tapered Extrusion PPS Data"',uiOutput("show_vars3_input"))
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel('Single Extrusion PPS Data',
fluidRow(
column(8,
fluidRow(
column(3,uiOutput("PCSPN_input")),
column(3,uiOutput("PCSPD_input")),
column(3,uiOutput("PCSRN_input")),
column(3,uiOutput("PCSRD_input"))
),
fluidRow(
column(3,uiOutput("PCSPPSN_input")),
column(3,uiOutput("PCSDS_input")),
column(3,uiOutput("PCSTS_input")),
column(3,uiOutput("PCSSP_input"))
),
fluidRow(
column(3,uiOutput("PCSIDI_input")),
column(3,uiOutput("PCSODI_input")),
column(3,uiOutput("PCSWT_input")),
column(3,uiOutput("PCSOR_input"))
),
fluidRow(
column(3,uiOutput("PCSCCT_input")),
column(3,uiOutput("PCSLength_input")),
column(3,uiOutput("PCSPPD_input"))
)
),
column(4,
fluidRow(
column(4,uiOutput("PCSNEXIV_input")),
column(4,uiOutput("PCSAnnealed_input")),
column(4,uiOutput("PCSCaliper_input"))
),
fluidRow(
column(4,uiOutput("PCSOS_input")),
column(4,uiOutput("PCSMP_input")),
column(4,uiOutput("PCSHT_input"))
),
fluidRow(
column(4,uiOutput("PCSSPD_input")),
column(4,uiOutput("PCSSLD_input")),
column(4,uiOutput("PCSDLN_input"))
),
fluidRow(
column(4,uiOutput("PCSULT_input")),
column(5,uiOutput("PCSVC_input")),
column(3,uiOutput("PCSIRD_input"))
)
)
),
fluidRow(
DT::dataTableOutput("mytable1"),
verbatimTextOutput("Summary1")
)
),
tabPanel('Multi-Layered Extrusion PPS Data',
fluidRow(
column(3,uiOutput("PCMPN_input")),
column(3,uiOutput("PCMPD_input")),
column(3,uiOutput("PCMRN_input")),
column(3,uiOutput("PCMRD_input")),
column(3,uiOutput("PCMDS_input")),
column(3,uiOutput("PCMTS_input")),
column(3,uiOutput("PCMID_input")),
column(3,uiOutput("PCMOD_input")),
column(3,uiOutput("PCMIWT_input")),
column(3,uiOutput("PCMMWT_input")),
column(3,uiOutput("PCMOWT_input")),
column(3,uiOutput("PCMTWT_input")),
column(3,uiOutput("PCMTL_input"))
),
fluidRow(
DT::dataTableOutput('mytable2')
)
), #end Multi-Layered Extrusion PPS Data
tabPanel('Tapered Extrusion PPS Data',
fluidRow(
column(2,
fluidRow(uiOutput("PCTPN_input")),
fluidRow(uiOutput("PCTPD_input")),
fluidRow(uiOutput("PCTRN_input")),
fluidRow(uiOutput("PCTRD_input")),
fluidRow(uiOutput("PCTPPSN_input"))
),
column(2,
fluidRow(uiOutput("PCTDS_input")),
fluidRow(uiOutput("PCTDLL_input")),
fluidRow(uiOutput("PCTTS_input")),
fluidRow(uiOutput("PCTTLL_input")),
fluidRow(uiOutput("PCTSP_input"))
),
column(2,
fluidRow(uiOutput("PCTFT_input")),
fluidRow(uiOutput("PCTBZT1_input")),
fluidRow(uiOutput("PCTBZT2_input")),
fluidRow(uiOutput("PCTBZT3_input")),
fluidRow(uiOutput("PCTDT1_input")),
fluidRow(uiOutput("PCTDT2_input"))
)
),
fluidRow(
DT::dataTableOutput('mytable3')
)
)
#end Tapered Extrusion PPS Data
)#end tabsetPanel
)#end mainPanel
),#end tabPanel
tabPanel('Output',
sidebarPanel(
conditionalPanel(
'input.output_dataset === "MES Data"',uiOutput("show_vars4_input")
)
),#end sidebarPanel
mainPanel(
tabsetPanel(
id = 'output_dataset',
tabPanel('MES Data',
fluidRow(
column(2,uiOutput("OPMMN_input")),
column(2,uiOutput("OPMBN_input")),
column(2,uiOutput("OPMSN_input")),
column(2,uiOutput("OPMOI_input")),
column(3,uiOutput("OPMDR_input"))
),
# Create a new row for the table.
fluidRow(
DT::dataTableOutput("mytable4")
)
)
)
) #end mainPanel
), #end tabPanel for 'Output'
tabPanel('Extra',
sidebarPanel(
conditionalPanel(
'input.extra_dataset === "Resin Data"',uiOutput("show_vars5_input")
),
conditionalPanel(
'input.extra_dataset === "Screw Data"',uiOutput("show_vars6_input")
)
),#end sidebarPanel
mainPanel(
tabsetPanel(
id = 'extra_dataset',
tabPanel('Resin Data', DT::dataTableOutput('mytable5')),
tabPanel('Screw Data', DT::dataTableOutput('mytable6'))
)
) #end mainPanel
) #end tabPanel for 'Extra'
) #end for every tab
) #end fluidPage
runApp('Desktop/Shiny/ExtrusionApp/R code/ExtrusionApp/ExtrusionApp_Server.R')
View(multi_pps_data)
runApp('Desktop/Shiny/ExtrusionApp/R code/ExtrusionApp/ExtrusionApp_Server.R')
runApp('Desktop/Shiny/ExtrusionApp/R code/ExtrusionApp/ExtrusionApp_Server.R')
